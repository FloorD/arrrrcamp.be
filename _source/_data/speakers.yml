# encoding: UTF-8
- name: Barrié
  firstname: Étienne
  avatar: etiennebarrie.jpg
  twitter: https://twitter.com/bihi
  published: true
  bio: "Étienne is a Rubyist with 10 years of experience, faithful to HTTP and enthusiastic git force pusher. He recently moved from Paris to Montréal to join the Shopify team."
  title: Ruby keyword args and the options hash, from the parser to the virtual machine
  slug: etienne-barrie
  description: |-
    <p>Ruby has slowly but surely added support for keyword arguments.</p>
    <p>Starting from the implicit braces for a hash at the end of an argument list, it has grown up to required keyword arguments in 2.1.</p>
    <p>This talk will try to convince you that keyword arguments are a lie and don't even exist, and why you should use them anyway.</p>
- name: R. Clark
  firstname: Jason
  avatar: jasonrclark.png
  twitter: https://twitter.com/jasonrclark
  published: true
  bio: "Jason fell in love with programming as a young boy watching his dad work in Clipper and dBase III (no, really). The obsession sparked there continues to this day. He works for New Relic on the Ruby Agent, and in his spare time contributes to the Shoes project. When not at work, he enjoy cycling, homebrewing, and hanging out with his family."
  title: "Peeking into Ruby: Tracing Running Code"
  slug: jason-r-clark
  description: |-
    <p>Your Ruby app is in production, but something isn't quite right. It worked locally, it passed CI... why is the running app acting weird?</p>
    <p>If this sounds familiar, you're in luck. Multiple tools exist for grappling with a running Ruby app. This talk will introduce a variety of tools and techniques for peeking into what your Ruby app is doing. From Ruby-level method tracing using rbtrace, all the way down to watching kernel syscalls with strace, you can see what your app is doing, and I'll show you how.</p>
    <p>Don't let your production system go unwatched!</p>
- name: Myers
  firstname: Rachel
  avatar: rachelmyers.jpg
  twitter: https://twitter.com/rachelmyers
  published: true
  bio: "Rachel is a developer at GitHub who loves ruby; she also does things she loves less, like javascript (coffeescript, really), email, and front end performance monitoring. She is on the Board of, and a volunteer for, RailsBridge, which holds free workshops around the world to teach Ruby and Rails to marginalized groups, including women, people of color and non-English speakers. In her free time she likes doing her nails and playing legos, which don't really go together well."
  title: to be announced
  slug: rachel-myers
  description: <p>To be announced.</p>
- name: Phippen
  firstname: Sam
  avatar: samphippen.jpg
  twitter: http://twitter.com/samphippen
  published: true
  bio: "Sam Phippen is a swashbuckling hacker from London, UK. He fixes every size of data problem at Fun and Plausible Solutions. He helps fight for the forces of justice as a member of the RSpec core team. He's sad that he can't hug every cat."
  title: Extremely Defensive Coding
  slug: sam-phippen
  description: |-
    <p>Defensive programming is one of those abstract ideas that seems great. We all want to use these ideas to ensure the long-term maintainability of our codebases. It is, however, often unclear what we should be defending against and what form those defenses should take. We can find places where defensive patterns could be added by looking at the edge cases that occur in our system. Where it seems appropriate, we can then apply ideas and patterns from defensive programming.</p>
    <p>In this talk we'll look at some of the extremely defensive patterns that have been driven out in RSpec throughout the years. We'll look at building Ruby that works accross a wide range of interpreters and versions (including 1.8.7!). We'll investigate how you can write code that defends against objects that redefine methods like send, method and is_a?. We'll also see how the behaviour of prepend can occasionally confuse even the most mature source bases.</p>
    <p>You should come to this talk if you want to learn about inheritence and method resolution in ruby, defensive programming techniques and cross interpreter Ruby patterns.</p>
